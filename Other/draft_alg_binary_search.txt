#include <stdio.h>
#include <libcs50-8.1.0/cs50.h>

int BinarySearch(int massive[], int * left_border, int * rigth_border);

int n = 0;
int * pntr_n = &n;

int main() //int argc, string argv[]
{
    int q = 12; //int q = (argc - 1);
    int massive[12] = { 1, 3, 4, 9, 11, 15, 20, 21, 25, 27, 31, 33};
    /*for(int i = 0; i < q; i++)
    {
        massive[i] = atoi(argv[i+1]);
    }*/
    printf("Quantity of numbers = %d. Massive:\n", q);
    for(int i = 0; i < q; i++)
    {
        printf("%d\t", massive[i]);
    }
    printf("\nEnter an integer number to search for:\t");
    scanf("%d", &n);
    int addr = BinarySearch(massive, &massive[0], &massive[q-1]);
    if(addr == -1) printf("\nNumber '%d' is not find.\n", n);
    else printf("Number '%d' is find! It is located in Massive[%d].\n", n, addr);
    return 0;
}

/*int BinarySearch(int massive[], int q, int n)
{
    for(int i = 0; i != -1; i++)
    {
        ((q % 2) == 1) ? (q = (q / 2) + 1) : (q = (q / 2));
        if(n < massive[q]);
        else if(n > massive[q]);
        else i = -1;
    }
    return q;
}*/

/*int BinarySearch1(int massive[], int * left_border, int * rigth_border, int q)
{
    int middle;
    int * left_b_new, * rigth_b_new;
    /*if(q == 1)
    {
        if(* left_border == * pntr_n && * rigth_border == * pntr_n)
        {
            int a = (left_border - &massive[0]) / sizeof(massive[0]);
            return a;
        }
    }
    else
    {
        ((q % 2) == 1) ? (middle = ((q - 1) / 2) + 1) : (middle = (q / 2) + 1);
    }*/
    /*if(q > 2)
    {
        ((q % 2) == 1) ? (middle = ((q - 1) / 2) + 1) : (middle = (q / 2) + 1);
        if(* pntr_n < massive[middle-1])
        {
            left_b_new = left_border;
            rigth_b_new = rigth_border - middle + 1;
            q = q - middle + 1;
            BinarySearch(massive, left_b_new, rigth_b_new, q);
        }
        else if(* pntr_n > massive[middle-1])
        {
            left_b_new = left_border - middle + 1;
            rigth_b_new = rigth_border;
            q = q - middle + 1;
            BinarySearch(massive, left_b_new, rigth_b_new, q);
        }
        else if(* pntr_n == massive[middle-1])
        {
            int a = (left_border - &massive[0]) / sizeof(massive[0]);
            return a;
        }
    }
    else
    {

    }
}*/

int BinarySearch(int massive[], int * left_border, int * rigth_border)
{
    int middle = 0, shift = 0;
    int * left_border_new = 0, * right_border_new = 0;
    unsigned int lenth = rigth_border - left_border + 1;
    if(lenth > 2)
    {
        ((lenth % 2) == 1) ? (middle = ((lenth - 1) / 2) + 1) : (middle = (lenth / 2) + 1, shift = 1);
        if(* pntr_n < * (left_border + middle - 1))
        {
            left_border_new = left_border;
            right_border_new = rigth_border - middle + shift;
            BinarySearch(massive, left_border_new, right_border_new);
        }
        else if(* pntr_n > * (left_border + middle - 1))
        {
            right_border_new = rigth_border;
            left_border_new = left_border + middle;
            BinarySearch(massive, left_border_new, right_border_new);
        }
        else if(* pntr_n == * (left_border + middle - 1))
        {
            unsigned int a = (left_border + middle - 1) - &massive[0];
            return a;
        }
    }
    else
    {
        if(* left_border == * pntr_n)
        {
            unsigned int a = left_border - &massive[0];
            return a;
        }
        else if(* rigth_border == * pntr_n)
        {
            unsigned int a = rigth_border - &massive[0];
            return a;
        }
        else return -1;
    }
}
